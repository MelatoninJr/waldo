{"version":3,"sources":["components/waldo.jpg","components/mario.png","components/fox.png","components/star.png","components/stopwatch.js","components/game.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Stopwatch","props","running","time","setRunning","setTime","useEffect","interval","setInterval","prevTime","clearInterval","react_default","a","createElement","className","Math","floor","slice","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","Game","collection","_useState","useState","_useState2","Object","slicedToArray","hoverarray","_useState3","_useState4","imagearray","SetImageArray","_useState5","_useState6","_useState7","_useState8","counter","setCounter","_useState9","_useState10","_useState11","_useState12","inputRef","useRef","marioRef","imageboxRef","mariostatus","starstatus","foxstatus","compareValues","name","storageref","characterPositions","getDocs","then","snapshot","docs","forEach","doc","push","objectSpread","data","id","console","log","current","style","opacity","setTimeout","alert","boundstwo","getBoundingClientRect","xwindow","width","ywindow","height","newMarioX","newMarioY","newStarX","newStarY","newFoxX","newFoxY","updateDoc","mario","star","fox","src","ref","stopwatch","waldo","onClick","event","bounds","target","x","clientX","left","y","clientY","top","onMouseMove","boxselector","map","value","index","key","App","react_router_dom","basename","react_router","path","element","components_game","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.dc9b32a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/waldo.953dadcb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mario.2b46d42c.png\";","module.exports = __webpack_public_path__ + \"static/media/fox.1de5f70d.png\";","module.exports = __webpack_public_path__ + \"static/media/star.b6af7485.png\";","import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n\n\n\nconst Stopwatch = (props) => {\n    const { running, setRunning, time, setTime} = props\n    useEffect(() => {\n      let interval;\n      if (running) {\n        interval = setInterval(() => {\n          setTime((prevTime) => prevTime + 10);\n        }, 10);\n      } else if (!running) {\n        clearInterval(interval);\n      }\n      return () => clearInterval(interval);\n    }, [running]);\n    return (\n      <div className=\"stopwatch\">\n        <div className=\"numbers\">\n          <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n          <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n          <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n        </div>\n\n      </div>\n    );\n  };\n\n  export default Stopwatch;","import './game.css';\nimport React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport waldo from './waldo.jpg'\nimport mario from './mario.png'\nimport fox from './fox.png'\nimport star from './star.png'\nimport { initializeApp } from \"firebase/app\";\nimport { collection, getDocs, addDoc, Timestamp, updateDoc, getFirestore, doc } from \"firebase/firestore\"\nimport Stopwatch from './stopwatch'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAgNvtfRfpoYEiLtDgwy5zsGjhJyWBe_Zo\",\n    authDomain: \"waldo-d3ec0.firebaseapp.com\",\n    projectId: \"waldo-d3ec0\",\n    storageBucket: \"waldo-d3ec0.appspot.com\",\n    messagingSenderId: \"914214078248\",\n    appId: \"1:914214078248:web:2652732eff8af53be0721d\"\n  };\n  \n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const db = getFirestore()\n  const storageref = collection(db, 'coordinates')\n\n\n\n\nconst Game = (props) => {\n\n    const [hoverarray, SetHoverArray] = useState([1])\n    const [imagearray, SetImageArray] = useState([])\n    const [storedarray, setStoredArray] = useState([])\n    const [counter, setCounter] = useState(0)\n    const [time, setTime] = useState(0);\n    const [running, setRunning] = useState(true);\n    const inputRef = useRef(null)\n    const marioRef = useRef(null)\n    const imageboxRef = useRef(null)\n    const mariostatus = useRef(null)\n    const starstatus = useRef(null)\n    const foxstatus = useRef(null)\n\n\n\n\n//OnClick of image get bounds for image and calculate (x,y) where clicked\n\n    const placeCharacters = ( event ) => {\n        let bounds = event.target.getBoundingClientRect(); \n        let x = event.clientX - bounds.left;\n        let y = event.clientY - bounds.top;\n   \n    \n        const storageref = doc(db, 'coordinates', 'click')\n        updateDoc(storageref, {\n            current: [x, y]\n        })\n        .then(() => {\n            console.log('sending...')\n        })\n\n        SetImageArray([1])\n        setTimeout(() => {\n            if(hoverarray[0] == 1) {\n                imageboxRef.current.style.opacity = '100%'\n                console.log(imageboxRef.current)\n                imageboxRef.current.style.left = x + 'px'\n                imageboxRef.current.style.top = y + 'px'\n            }\n        }, 200)        \n      }\n\n\n\n\n\n//compareValues is ran on character guess selection\n//It retrieves the respective firebase info and compares\n//the selected spot to stored character coords\n\n    const compareValues = (name) => {\n        const storageref = collection(db, 'coordinates')\n        let characterPositions = []\n\n        getDocs(storageref)\n        .then((snapshot) => {\n            snapshot.docs.forEach((doc) => {\n                characterPositions.push({ ...doc.data(), id: doc.id })\n            })\n            console.log(characterPositions[0][name])\n            if(name === 'mario') {\n                if(((characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50) && \n                    (characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50)\n\n                )) \n                {\n                    let newcount = counter + 1\n                    setCounter(newcount)\n                    console.log('You found Mario!')\n                    mariostatus.current.style.opacity = '30%'\n                } \n            }\n            if(name === 'fox') {\n                if(((characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50) && \n                    (characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50)\n                    \n                )) \n                {\n                    let newcount = counter + 1\n                    setCounter(newcount)\n                    console.log('You found Fox!')\n                    foxstatus.current.style.opacity = '30%'\n                } \n\n            }\n\n            if(name === 'star') {\n                if(((characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50) && \n                    (characterPositions[1].current[1]) >= (characterPositions[0][name][1] - 50) && (characterPositions[1].current[1]) <= (characterPositions[0][name][1] + 50)\n                    \n                )) \n                {\n                    let newcount = counter + 1\n                    setCounter(newcount)\n                    console.log('You found Star!')\n                    starstatus.current.style.opacity = '30%'\n                } \n\n            }\n\n        })\n\n        SetImageArray([])\n        if(counter >= 2) {\n            setRunning(false)\n            setTimeout(() => {\n                alert('You won!')\n            },500)\n            \n        }\n\n    }\n\n\n\n\n\n//Boxfollow is used to display a different cursor radius that follows you around\n      const boxfollow = (event) => {\n        const boxselector = marioRef.current\n        let bounds = event.target.getBoundingClientRect();\n        var x = event.clientX - bounds.left;\n        var y = event.clientY - bounds.top;\n        boxselector.style.left = x + 'px'\n        boxselector.style.top = y + 'px'\n      }\n\n      \n\n\n\n\n//Stores initial character coordinates based on screensize\n      useEffect(() => {\n        setTimeout(() => {\n            const initialselect = inputRef.current\n            let boundstwo = initialselect.getBoundingClientRect();\n            //These needed to change\n            let storedwidthx = 1440\n            let storedheighty = 3120\n          \n            let storedstarx = 1112\n            let storedstary = 1747\n          \n            let storedfoxx = 172\n            let storedfoxy = 1338\n          \n            //These can stay the same. Above needs to change.\n            let storedmariox = 970\n            let storedmarioy= 1869\n          \n            let xwindow = boundstwo.width\n            let ywindow = boundstwo.height\n          \n            let newMarioX = (storedmariox * xwindow) / storedwidthx\n            let newMarioY = (storedmarioy * ywindow) / storedheighty\n    \n            let newStarX = (storedstarx * xwindow) / storedwidthx\n            let newStarY = (storedstary * ywindow) / storedheighty\n    \n            let newFoxX = (storedfoxx * xwindow) / storedwidthx\n            let newFoxY = (storedfoxy * ywindow) / storedheighty\n    \n            console.log(xwindow, ywindow)\n    \n            \n    \n            const storageref = doc(db, 'coordinates', 'E9F8lXBRRiHAKxbVS2OT')\n            updateDoc(storageref, {\n                mario: [newMarioX, newMarioY],\n                star: [newStarX, newStarY],\n                fox: [newFoxX, newFoxY]\n            })\n            .then(() => {\n                console.log('sending...')\n            })\n\n        }, 1000)\n      }, []);\n\n\n      \n\n\n\n\n\n\n\n\n\n\n    return (\n        <div className=\"App\" >\n            <div className='container' >\n                <div className='mini-container' >\n                  <div className='header'>\n                    <div className='status-container'>\n                        <img src={mario} className='image-hold-two' ref={mariostatus}></img>\n                        <img src={star} className='image-hold-two' ref={starstatus}></img>\n                        <img src={fox} className='image-hold-two' ref={foxstatus}></img>\n                    </div>\n                    <Stopwatch className='stopwatch' time={time} setTime={setTime} running={running} setRunning={setRunning} />\n                  </div>\n                  <img src={waldo} onClick={placeCharacters} onMouseMove={boxfollow} className='waldo-image' ref={inputRef} ></img>\n                  {hoverarray.map((value, index) => {\n\n                    return(\n                        <div className='mario' key={index}  ref={marioRef} ></div>\n                    )\n                  })}\n                  {imagearray.map((value, index) => {\n                    return(\n                       <div className='image-holder' key={index} ref={imageboxRef}>\n                        <img src={mario} className='image-hold' data='mario-image' onClick={() => compareValues('mario')} ></img>\n                        <img src={star} className='image-hold' onClick={() => compareValues('star')}></img>\n                        <img src={fox} className='image-hold' onClick={() => compareValues('fox')}></img>\n    \n                      </div>\n                    )\n                  })}\n \n                  \n            \n\n                </div>\n            </div>\n        </div>\n      );\n\n\n}\n\n\n\nexport default Game;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\nimport waldo from './components/waldo.jpg'\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route, HashRouter } from \"react-router-dom\";\nimport Game from './components/game'\n\n\nfunction App() {\n\nreturn (\n  <HashRouter basename='/'>\n    <Routes>\n      <Route path='/' element={<Game/>} />\n    </Routes>\n  </HashRouter>\n);\n}\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}